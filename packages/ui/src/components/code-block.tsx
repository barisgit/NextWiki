"use client";

import React, { useState } from "react";
import { Prism as SyntaxHighlighter } from "react-syntax-highlighter";
// Choose a theme you like, e.g., vscDarkPlus, atomDark, etc.
// You might need to adjust imports based on your bundler/setup (esm vs cjs)
import { vscDarkPlus } from "react-syntax-highlighter/dist/esm/styles/prism";
import { Button } from "./button";
import { CheckIcon, CopyIcon } from "@radix-ui/react-icons";
import { cn } from "../utils";

/**
 * Converts React children nodes to a string, handling <br> tags.
 * @param nodes - The React nodes to process.
 * @returns The extracted text content.
 */
const childrenToString = (nodes: React.ReactNode): string => {
  return React.Children.toArray(nodes)
    .map((node): string => {
      if (typeof node === "string") return node;
      if (typeof node === "number") return String(node);
      if (React.isValidElement(node)) {
        // Handle <br> tags specifically
        if ((node.type as React.ElementType) === "br") return "\n";
        // Recursively process children if they exist
        const props = node.props as { children?: React.ReactNode };
        if (props && props.children) {
          return childrenToString(props.children);
        }
      }
      return ""; // Ignore other node types like null, boolean, etc.
    })
    .join("");
};

/**
 * CodeBlock component properties
 */
interface CodeBlockProps {
  children: React.ReactNode;
  language?: string;
  className?: string;
  showLineNumbers?: boolean;
  /** Pass specific theme styles from react-syntax-highlighter */
  theme?: { [key: string]: React.CSSProperties };
}

/**
 * Reusable code block component using react-syntax-highlighter
 * @param children - The code content as children
 * @param language - Programming language for syntax highlighting
 * @param className - Additional class names for the wrapper div
 * @param showLineNumbers - Whether to show line numbers (defaults to false)
 * @param theme - Syntax highlighting theme (defaults to vscDarkPlus)
 */
export function CodeBlock({
  children,
  language = "plaintext", // Default to plaintext if no language provided
  className,
  showLineNumbers = true,
  theme = vscDarkPlus,
}: CodeBlockProps) {
  const [isCopied, setIsCopied] = useState(false);

  // Convert children to a string, handling <br> tags
  const codeString = childrenToString(children).trim();

  const handleCopy = async () => {
    if (!codeString) return;
    try {
      await navigator.clipboard.writeText(codeString);
      setIsCopied(true);
      setTimeout(() => setIsCopied(false), 2000);
    } catch (err) {
      void err;
    }
  };

  // Custom style for the <pre> tag to override default theme margins/padding if needed
  const preStyle: React.CSSProperties = {
    margin: 0, // Remove default margins from the theme
    padding: "1rem", // Apply consistent padding
    borderRadius: "0.5rem", // Match Tailwind's rounded-lg
    // Add other overrides if necessary
  };

  // Adjust line number style if needed
  const lineNumberStyle: React.CSSProperties = {
    minWidth: "2.25em", // Ensure space for line numbers
    paddingRight: "1em",
    textAlign: "right",
    userSelect: "none",
    opacity: 0.5,
  };

  return (
    <div className={cn("relative group", className)}>
      {/* Container for language and copy button */}
      <div className="absolute z-10 flex items-center gap-2 right-3 top-3">
        {language && language !== "plaintext" && (
          <span className="px-2 py-0.5 rounded-md bg-background-level2/80 text-xs font-medium text-text-tertiary backdrop-blur-sm">
            {language.toUpperCase()}
          </span>
        )}
        <Button
          variant="soft"
          size="sm"
          color="neutral"
          onClick={handleCopy}
          disabled={!codeString}
          className="opacity-80 hover:opacity-100 transition-opacity pr-3 pl-2.5 bg-background-level2/60 hover:bg-background-level2/90 backdrop-blur-md shadow-sm"
          aria-label="Copy code to clipboard"
        >
          {isCopied ? (
            <>
              <CheckIcon className="w-4 h-4 mr-1.5 text-success-500" />
              Copied!
            </>
          ) : (
            <>
              <CopyIcon className="w-4 h-4 mr-1.5 text-text-tertiary" />
              Copy
            </>
          )}
        </Button>
      </div>

      {/* Syntax Highlighter Component */}
      <SyntaxHighlighter
        language={language}
        style={theme}
        showLineNumbers={showLineNumbers}
        lineNumberStyle={lineNumberStyle}
        wrapLines={true} // Optional: wrap long lines
        customStyle={preStyle} // Apply custom styles to the <pre> element
        // The code tag generated by the library often needs specific styling:
        codeTagProps={{
          style: {
            fontFamily: "var(--font-mono)", // Use your Tailwind mono font variable
            fontSize: "0.875rem", // Equivalent to text-sm
            lineHeight: "1.6", // Adjust line height for readability
          },
        }}
      >
        {codeString}
      </SyntaxHighlighter>
    </div>
  );
}
